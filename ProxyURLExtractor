void ProxyURLExtractor::Extract( const KeyItems& keys, const std::string& raw_url, std::string& sub_url )
{
#if 1
        //TODO 请面试者在这里添加自己的代码实现以完成所需功能
    		Tokener token(raw_url);
        token.skipTo('?');
        token.next(); //skip one char : '?' 
        std::string key;
    		std::string t;		
        while (!token.isEnd()) {
            key = token.nextString('=');	
      			int i=key.length()-1;
      			int lenth=0;
      			while(i>=0&& isalpha(key[i])!=0 ){		
      				lenth++;
      				i--;
  			    }						
      			if(lenth< key.length() && lenth>0)				
      				key=key.substr(key.length()-lenth);	

            if (keys.find(key) != keys.end()) {
                const char* curpos = token.getCurReadPos();
                int nreadable = token.getReadableSize();
        				int ii=0;
        				int lenth1=0;
        				while(ii<strlen(curpos)&& curpos[ii]!= '/' ){		
        					lenth1++;
        					ii++;
        				}
        				if(lenth1== strlen(curpos)){
        					curpos="";
        					nreadable=0;
        				}
                sub_url = token.nextString('&');

                if (sub_url.empty() && nreadable > 0) {               
                    assert(curpos);
                    sub_url.assign(curpos, nreadable);
                }
            }
            token.skipTo('&');
            token.next();//skip one char : '&'
        }
#else
        //这是一份参考实现，但在特殊情况下工作不能符合预期
        Tokener token(raw_url);
        token.skipTo('?');
        token.next(); //skip one char : '?' 
        std::string key;
        while (!token.isEnd()) {
            key = token.nextString('=');
            if (keys.find(key) != keys.end()) {
                const char* curpos = token.getCurReadPos();
                int nreadable = token.getReadableSize();

                /**
                * case 1: 
                *  raw_url="http://www.microsofttranslator.com/bv.aspx?from=&to=zh-chs&a=http://hnujug.com/&xx=yy"
                *  sub_url="http://hnujug.com/"
                */
                sub_url = token.nextString('&');

                if (sub_url.empty() && nreadable > 0) {
                    /**
                    * case 2: 
                    * raw_url="http://www.microsofttranslator.com/bv.aspx?from=&to=zh-chs&a=http://hnujug.com/"
                    * sub_url="http://hnujug.com/"
                    */
                    assert(curpos);
                    sub_url.assign(curpos, nreadable);
                }
            }
            token.skipTo('&');
            token.next();//skip one char : '&'
        }
#endif
    }
